Example01

	Simple prototype application No EJBs.
	It will implement Movie, Show and MovieListing as
	plain Java classes. In main, we use MovieListing to
	retrieve Show and Movie information. Show and Movie
	objects are instantiated internally by MovieListing

Example02

	The first EJB: Movie EB. No client, no test

Example03

	Creating a client. Primary keys are generated by
	the client using System.currentTimeMs()

Example04

	A Test case for the Movie EB

Example05

	Movie using XDoclet (we'll use XDoclet from now on)

Example06

	Fixing the PK generation problem: the AutoCounter EB

Example07

	Introducing a Facade: the ShowManager Stateless Session Bean (SLSB).
	It takes care of generating a new PK using the autoCounter every time
	a new Movie is created. The name of the counter (PK of a AutoCounter
	instance) will be returned by a home interface business method of the
	Movie bean

	Also, note that the SB will have to return data transfer objects to
	the clients with movie and show information.

Example08

	Modify the EBs so that they expose only local interfaces. The @ejb:home
	local-class="" and @ejb:interface local-class="" tags are required to
	have the interfaces generated in the right package (they would be
	generated in the same package as the implementation class by default).
	Also, the build script is modified so that the local interfaces are
	not included in the client-jar.
	Updated	the test cases and the client application.


Example09

	Another facade: the MovieListing SLSB. Introduces also the use of
	data objects to transfer raw information bewteen tiers.

Example10

	Introduces the Show EB and uses CMR for the relationships with Movie.
	New methods in MovieListing and ShowManager to work with Shows

Example11

	Introduce the ticketing process (details to be defined)
